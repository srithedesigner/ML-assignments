{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc4cb9d5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:15.346784Z",
     "iopub.status.busy": "2022-11-15T01:04:15.346274Z",
     "iopub.status.idle": "2022-11-15T01:04:15.365962Z",
     "shell.execute_reply": "2022-11-15T01:04:15.364750Z"
    },
    "papermill": {
     "duration": 0.030523,
     "end_time": "2022-11-15T01:04:15.369021",
     "exception": false,
     "start_time": "2022-11-15T01:04:15.338498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/email-spam-classification-dataset-csv/emails.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a957d0ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:15.380971Z",
     "iopub.status.busy": "2022-11-15T01:04:15.380529Z",
     "iopub.status.idle": "2022-11-15T01:04:15.385694Z",
     "shell.execute_reply": "2022-11-15T01:04:15.384608Z"
    },
    "papermill": {
     "duration": 0.013497,
     "end_time": "2022-11-15T01:04:15.387817",
     "exception": false,
     "start_time": "2022-11-15T01:04:15.374320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a1caf8dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:15.399687Z",
     "iopub.status.busy": "2022-11-15T01:04:15.399273Z",
     "iopub.status.idle": "2022-11-15T01:04:17.467349Z",
     "shell.execute_reply": "2022-11-15T01:04:17.466114Z"
    },
    "papermill": {
     "duration": 2.077275,
     "end_time": "2022-11-15T01:04:17.470155",
     "exception": false,
     "start_time": "2022-11-15T01:04:15.392880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5172, 3002)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(\"../input/email-spam-classification-dataset-csv/emails.csv\", encoding='latin')\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d98ed507",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:17.483122Z",
     "iopub.status.busy": "2022-11-15T01:04:17.481900Z",
     "iopub.status.idle": "2022-11-15T01:04:17.513183Z",
     "shell.execute_reply": "2022-11-15T01:04:17.512000Z"
    },
    "papermill": {
     "duration": 0.04026,
     "end_time": "2022-11-15T01:04:17.515615",
     "exception": false,
     "start_time": "2022-11-15T01:04:17.475355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Email No.</th>\n",
       "      <th>the</th>\n",
       "      <th>to</th>\n",
       "      <th>ect</th>\n",
       "      <th>and</th>\n",
       "      <th>for</th>\n",
       "      <th>of</th>\n",
       "      <th>a</th>\n",
       "      <th>you</th>\n",
       "      <th>hou</th>\n",
       "      <th>...</th>\n",
       "      <th>connevey</th>\n",
       "      <th>jay</th>\n",
       "      <th>valued</th>\n",
       "      <th>lay</th>\n",
       "      <th>infrastructure</th>\n",
       "      <th>military</th>\n",
       "      <th>allowing</th>\n",
       "      <th>ff</th>\n",
       "      <th>dry</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Email 1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Email 2</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>102</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Email 3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Email 4</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Email 5</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 3002 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Email No.  the  to  ect  and  for  of    a  you  hou  ...  connevey  jay  \\\n",
       "0   Email 1    0   0    1    0    0   0    2    0    0  ...         0    0   \n",
       "1   Email 2    8  13   24    6    6   2  102    1   27  ...         0    0   \n",
       "2   Email 3    0   0    1    0    0   0    8    0    0  ...         0    0   \n",
       "3   Email 4    0   5   22    0    5   1   51    2   10  ...         0    0   \n",
       "4   Email 5    7   6   17    1    5   2   57    0    9  ...         0    0   \n",
       "\n",
       "   valued  lay  infrastructure  military  allowing  ff  dry  Prediction  \n",
       "0       0    0               0         0         0   0    0           0  \n",
       "1       0    0               0         0         0   1    0           0  \n",
       "2       0    0               0         0         0   0    0           0  \n",
       "3       0    0               0         0         0   0    0           0  \n",
       "4       0    0               0         0         0   1    0           0  \n",
       "\n",
       "[5 rows x 3002 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa729053",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:17.529052Z",
     "iopub.status.busy": "2022-11-15T01:04:17.527744Z",
     "iopub.status.idle": "2022-11-15T01:04:17.604412Z",
     "shell.execute_reply": "2022-11-15T01:04:17.602948Z"
    },
    "papermill": {
     "duration": 0.087182,
     "end_time": "2022-11-15T01:04:17.608171",
     "exception": false,
     "start_time": "2022-11-15T01:04:17.520989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>the</th>\n",
       "      <th>to</th>\n",
       "      <th>ect</th>\n",
       "      <th>and</th>\n",
       "      <th>for</th>\n",
       "      <th>of</th>\n",
       "      <th>a</th>\n",
       "      <th>you</th>\n",
       "      <th>hou</th>\n",
       "      <th>in</th>\n",
       "      <th>...</th>\n",
       "      <th>connevey</th>\n",
       "      <th>jay</th>\n",
       "      <th>valued</th>\n",
       "      <th>lay</th>\n",
       "      <th>infrastructure</th>\n",
       "      <th>military</th>\n",
       "      <th>allowing</th>\n",
       "      <th>ff</th>\n",
       "      <th>dry</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>102</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 3001 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   the  to  ect  and  for  of    a  you  hou  in  ...  connevey  jay  valued  \\\n",
       "0    0   0    1    0    0   0    2    0    0   0  ...         0    0       0   \n",
       "1    8  13   24    6    6   2  102    1   27  18  ...         0    0       0   \n",
       "2    0   0    1    0    0   0    8    0    0   4  ...         0    0       0   \n",
       "3    0   5   22    0    5   1   51    2   10   1  ...         0    0       0   \n",
       "4    7   6   17    1    5   2   57    0    9   3  ...         0    0       0   \n",
       "\n",
       "   lay  infrastructure  military  allowing  ff  dry  Prediction  \n",
       "0    0               0         0         0   0    0           0  \n",
       "1    0               0         0         0   1    0           0  \n",
       "2    0               0         0         0   0    0           0  \n",
       "3    0               0         0         0   0    0           0  \n",
       "4    0               0         0         0   1    0           0  \n",
       "\n",
       "[5 rows x 3001 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop(columns=['Email No.'], inplace=True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4a331ee0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:17.625577Z",
     "iopub.status.busy": "2022-11-15T01:04:17.625137Z",
     "iopub.status.idle": "2022-11-15T01:04:17.648222Z",
     "shell.execute_reply": "2022-11-15T01:04:17.646988Z"
    },
    "papermill": {
     "duration": 0.036211,
     "end_time": "2022-11-15T01:04:17.651226",
     "exception": false,
     "start_time": "2022-11-15T01:04:17.615015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    3001\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().any().value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3fd43b4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:17.666056Z",
     "iopub.status.busy": "2022-11-15T01:04:17.664851Z",
     "iopub.status.idle": "2022-11-15T01:04:17.676068Z",
     "shell.execute_reply": "2022-11-15T01:04:17.674661Z"
    },
    "papermill": {
     "duration": 0.021317,
     "end_time": "2022-11-15T01:04:17.678631",
     "exception": false,
     "start_time": "2022-11-15T01:04:17.657314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5172, 3000), (5172,))"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=data.iloc[:, :data.shape[1]-1]\n",
    "y=data.iloc[:, -1]\n",
    "X.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cdc489c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:17.698748Z",
     "iopub.status.busy": "2022-11-15T01:04:17.697634Z",
     "iopub.status.idle": "2022-11-15T01:04:18.679576Z",
     "shell.execute_reply": "2022-11-15T01:04:18.678430Z"
    },
    "papermill": {
     "duration": 0.994876,
     "end_time": "2022-11-15T01:04:18.682843",
     "exception": false,
     "start_time": "2022-11-15T01:04:17.687967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c223e884",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:18.697084Z",
     "iopub.status.busy": "2022-11-15T01:04:18.696025Z",
     "iopub.status.idle": "2022-11-15T01:04:18.818204Z",
     "shell.execute_reply": "2022-11-15T01:04:18.817251Z"
    },
    "papermill": {
     "duration": 0.132516,
     "end_time": "2022-11-15T01:04:18.821228",
     "exception": false,
     "start_time": "2022-11-15T01:04:18.688712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.15, random_state=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5967e26a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:18.838561Z",
     "iopub.status.busy": "2022-11-15T01:04:18.837740Z",
     "iopub.status.idle": "2022-11-15T01:04:18.918459Z",
     "shell.execute_reply": "2022-11-15T01:04:18.917365Z"
    },
    "papermill": {
     "duration": 0.092202,
     "end_time": "2022-11-15T01:04:18.921079",
     "exception": false,
     "start_time": "2022-11-15T01:04:18.828877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.neural_network import MLPClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5f3cfa43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:18.936386Z",
     "iopub.status.busy": "2022-11-15T01:04:18.935937Z",
     "iopub.status.idle": "2022-11-15T01:04:18.942589Z",
     "shell.execute_reply": "2022-11-15T01:04:18.941351Z"
    },
    "papermill": {
     "duration": 0.017787,
     "end_time": "2022-11-15T01:04:18.944853",
     "exception": false,
     "start_time": "2022-11-15T01:04:18.927066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "models={\"Logistic Regression\": LogisticRegression(random_state=8, solver='lbfgs', max_iter=2000),\n",
    "        \"Linear SVM\":LinearSVC(random_state=8, max_iter=3000),\n",
    "        \"Polynomical SVM\":SVC(kernel=\"poly\", degree=2, random_state=8),\n",
    "        \"RBF SVM\":SVC(kernel=\"rbf\", random_state=8),\n",
    "        \"Sigmoid SVM\":SVC(kernel=\"sigmoid\", random_state=8),\n",
    "        \"Multi-layer Perceptron Classification\": MLPClassifier(hidden_layer_sizes=[20, 20], \\\n",
    "                                                           learning_rate='adaptive', random_state=8)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6cb15bdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:18.958766Z",
     "iopub.status.busy": "2022-11-15T01:04:18.958012Z",
     "iopub.status.idle": "2022-11-15T01:04:18.963692Z",
     "shell.execute_reply": "2022-11-15T01:04:18.962560Z"
    },
    "papermill": {
     "duration": 0.015659,
     "end_time": "2022-11-15T01:04:18.966332",
     "exception": false,
     "start_time": "2022-11-15T01:04:18.950673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "66fc846b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:04:18.979933Z",
     "iopub.status.busy": "2022-11-15T01:04:18.979502Z",
     "iopub.status.idle": "2022-11-15T01:06:21.537487Z",
     "shell.execute_reply": "2022-11-15T01:06:21.535780Z"
    },
    "papermill": {
     "duration": 122.584967,
     "end_time": "2022-11-15T01:06:21.557179",
     "exception": false,
     "start_time": "2022-11-15T01:04:18.972212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for Logistic Regression model : 0.9806701030927835\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/svm/_base.py:1208: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for Linear SVM model : 0.9755154639175257\n",
      "Accuracy for Polynomical SVM model : 0.7615979381443299\n",
      "Accuracy for RBF SVM model : 0.8182989690721649\n",
      "Accuracy for Sigmoid SVM model : 0.6237113402061856\n",
      "Accuracy for Multi-layer Perceptron Classification model : 0.9845360824742269\n"
     ]
    }
   ],
   "source": [
    "for model_name, model in models.items():\n",
    "    y_pred=model.fit(X_train, y_train).predict(X_test)\n",
    "    print(f\"Accuracy for {model_name} model : {accuracy_score(y_test, y_pred)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "829569db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:06:21.591386Z",
     "iopub.status.busy": "2022-11-15T01:06:21.590633Z",
     "iopub.status.idle": "2022-11-15T01:06:21.605304Z",
     "shell.execute_reply": "2022-11-15T01:06:21.603627Z"
    },
    "papermill": {
     "duration": 0.037648,
     "end_time": "2022-11-15T01:06:21.610253",
     "exception": false,
     "start_time": "2022-11-15T01:06:21.572605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_count(text):\n",
    "    wordCounts = dict()\n",
    "    for word in text.split():\n",
    "        if word in wordCounts:\n",
    "            wordCounts[word] += 1\n",
    "        else:\n",
    "            wordCounts[word] = 1\n",
    "    \n",
    "    return wordCounts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "659773c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:06:21.644903Z",
     "iopub.status.busy": "2022-11-15T01:06:21.644189Z",
     "iopub.status.idle": "2022-11-15T01:06:21.655158Z",
     "shell.execute_reply": "2022-11-15T01:06:21.653825Z"
    },
    "papermill": {
     "duration": 0.030926,
     "end_time": "2022-11-15T01:06:21.657619",
     "exception": false,
     "start_time": "2022-11-15T01:06:21.626693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def euclidean_difference(test_WordCounts, training_WordCounts):\n",
    "    total = 0\n",
    "    for word in test_WordCounts:\n",
    "        if word in test_WordCounts and word in training_WordCounts:\n",
    "            total += (test_WordCounts[word] - training_WordCounts[word])**2\n",
    "            del training_WordCounts[word]\n",
    "        else:\n",
    "            total += test_WordCounts[word]**2\n",
    "    return total**0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4d0ada6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:06:21.672611Z",
     "iopub.status.busy": "2022-11-15T01:06:21.671798Z",
     "iopub.status.idle": "2022-11-15T01:06:21.678084Z",
     "shell.execute_reply": "2022-11-15T01:06:21.677224Z"
    },
    "papermill": {
     "duration": 0.016738,
     "end_time": "2022-11-15T01:06:21.680697",
     "exception": false,
     "start_time": "2022-11-15T01:06:21.663959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_class(selected_Kvalues):\n",
    "    spam_count = 0\n",
    "    ham_count = 0\n",
    "    for value in selected_Kvalues:\n",
    "        if value[0] == \"spam\":\n",
    "            spam_count += 1\n",
    "        else:\n",
    "            ham_count += 1\n",
    "    if spam_count > ham_count:\n",
    "        return \"spam\"\n",
    "    else:\n",
    "        return \"ham\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "90950fba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:06:21.695375Z",
     "iopub.status.busy": "2022-11-15T01:06:21.694929Z",
     "iopub.status.idle": "2022-11-15T01:06:21.702962Z",
     "shell.execute_reply": "2022-11-15T01:06:21.701695Z"
    },
    "papermill": {
     "duration": 0.018427,
     "end_time": "2022-11-15T01:06:21.705427",
     "exception": false,
     "start_time": "2022-11-15T01:06:21.687000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def knn_classifier(training_data, training_labels, test_data, K, tsize):\n",
    "    print(\"Running KNN Classifier...\")\n",
    "    \n",
    "    result = []\n",
    "    counter = 1\n",
    "    training_WordCounts = [] \n",
    "    for training_text in training_data:\n",
    "        training_WordCounts.append(get_count(training_text))\n",
    "    for test_text in test_data:\n",
    "        similarity = [] # List of euclidean distances\n",
    "        test_WordCounts = get_count(test_text)  # word counts for test email\n",
    "    for index in range(len(training_data)):\n",
    "        euclidean_diff =\\\n",
    "        euclidean_difference(test_WordCounts, training_WordCounts[index])\n",
    "        similarity.append([training_labels[index], euclidean_diff])\n",
    "        similarity = sorted(similarity, key = lambda i:i[1])\n",
    "        # Predicting the class of email\n",
    "        result.append(get_class(selected_Kvalues))\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "caf02197",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-15T01:06:21.721023Z",
     "iopub.status.busy": "2022-11-15T01:06:21.720208Z",
     "iopub.status.idle": "2022-11-15T01:06:21.729882Z",
     "shell.execute_reply": "2022-11-15T01:06:21.728904Z"
    },
    "papermill": {
     "duration": 0.020586,
     "end_time": "2022-11-15T01:06:21.732396",
     "exception": false,
     "start_time": "2022-11-15T01:06:21.711810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def main(K):\n",
    "    data = load_data()\n",
    "    data = preprocess_data(data)\n",
    "    training_data, test_data, training_labels, test_labels = split_data(data)\n",
    "    tsize = len(test_data)\n",
    "    result = knn_classifier(training_data, training_labels, test_data[:tsize], K, tsize) \n",
    "    accuracy = accuracy_score(test_labels[:tsize], result)\n",
    "    print(\"training data size\\t: \" + str(len(training_data)))\n",
    "    print(\"test data size\\t\\t: \" + str(len(test_data)))\n",
    "    print(\"K value\\t\\t\\t\\t: \" + str(K))\n",
    "    print(\"Samples tested\\t\\t: \" + str(tsize))\n",
    "    print(\"% accuracy\\t\\t\\t: \" + str(accuracy * 100))\n",
    "    print(\"Number correct\\t\\t: \" + str(int(accuracy * tsize)))\n",
    "    print(\"Number wrong\\t\\t: \" + str(int((1 - accuracy) * tsize)))\n",
    "    # Select K nearest neighbours\n",
    "    selected_Kvalues = [] \n",
    "    for i in range(K):\n",
    "        selected_Kvalues.append(similarity[i])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 135.978634,
   "end_time": "2022-11-15T01:06:22.563274",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-11-15T01:04:06.584640",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
