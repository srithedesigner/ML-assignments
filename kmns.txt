{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a944ab78",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:35.295415Z",
     "iopub.status.busy": "2022-11-11T05:54:35.294632Z",
     "iopub.status.idle": "2022-11-11T05:54:35.315783Z",
     "shell.execute_reply": "2022-11-11T05:54:35.314738Z"
    },
    "papermill": {
     "duration": 0.032383,
     "end_time": "2022-11-11T05:54:35.318512",
     "exception": false,
     "start_time": "2022-11-11T05:54:35.286129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/sample-sales-data/sales_data_sample.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b227065",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:35.329391Z",
     "iopub.status.busy": "2022-11-11T05:54:35.328956Z",
     "iopub.status.idle": "2022-11-11T05:54:36.936118Z",
     "shell.execute_reply": "2022-11-11T05:54:36.935072Z"
    },
    "papermill": {
     "duration": 1.615779,
     "end_time": "2022-11-11T05:54:36.939100",
     "exception": false,
     "start_time": "2022-11-11T05:54:35.323321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#importing the required libraries\n",
    "\n",
    "#viz Libraries\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "import seaborn as sns\n",
    "\n",
    "#warnings\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "#datetime\n",
    "import datetime as dt\n",
    "\n",
    "#StandardSccaler\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "#KMeans\n",
    "from sklearn.cluster import KMeans\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1d6b5a13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:36.951447Z",
     "iopub.status.busy": "2022-11-11T05:54:36.949949Z",
     "iopub.status.idle": "2022-11-11T05:54:36.996074Z",
     "shell.execute_reply": "2022-11-11T05:54:36.994959Z"
    },
    "papermill": {
     "duration": 0.054905,
     "end_time": "2022-11-11T05:54:36.998930",
     "exception": false,
     "start_time": "2022-11-11T05:54:36.944025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('../input/sample-sales-data/sales_data_sample.csv', encoding = 'unicode_escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bd4e5b7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.010786Z",
     "iopub.status.busy": "2022-11-11T05:54:37.010169Z",
     "iopub.status.idle": "2022-11-11T05:54:37.056958Z",
     "shell.execute_reply": "2022-11-11T05:54:37.055718Z"
    },
    "papermill": {
     "duration": 0.05635,
     "end_time": "2022-11-11T05:54:37.060164",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.003814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f37338c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.071060Z",
     "iopub.status.busy": "2022-11-11T05:54:37.070629Z",
     "iopub.status.idle": "2022-11-11T05:54:37.118391Z",
     "shell.execute_reply": "2022-11-11T05:54:37.116229Z"
    },
    "papermill": {
     "duration": 0.056794,
     "end_time": "2022-11-11T05:54:37.121529",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.064735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ORDERNUMBER</th>\n",
       "      <th>QUANTITYORDERED</th>\n",
       "      <th>PRICEEACH</th>\n",
       "      <th>ORDERLINENUMBER</th>\n",
       "      <th>SALES</th>\n",
       "      <th>ORDERDATE</th>\n",
       "      <th>STATUS</th>\n",
       "      <th>QTR_ID</th>\n",
       "      <th>MONTH_ID</th>\n",
       "      <th>YEAR_ID</th>\n",
       "      <th>...</th>\n",
       "      <th>ADDRESSLINE1</th>\n",
       "      <th>ADDRESSLINE2</th>\n",
       "      <th>CITY</th>\n",
       "      <th>STATE</th>\n",
       "      <th>POSTALCODE</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>TERRITORY</th>\n",
       "      <th>CONTACTLASTNAME</th>\n",
       "      <th>CONTACTFIRSTNAME</th>\n",
       "      <th>DEALSIZE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10107</td>\n",
       "      <td>30</td>\n",
       "      <td>95.70</td>\n",
       "      <td>2</td>\n",
       "      <td>2871.00</td>\n",
       "      <td>2003-02-24</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>897 Long Airport Avenue</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NYC</td>\n",
       "      <td>NY</td>\n",
       "      <td>10022</td>\n",
       "      <td>USA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yu</td>\n",
       "      <td>Kwai</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10121</td>\n",
       "      <td>34</td>\n",
       "      <td>81.35</td>\n",
       "      <td>5</td>\n",
       "      <td>2765.90</td>\n",
       "      <td>2003-05-07</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>59 rue de l'Abbaye</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reims</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51100</td>\n",
       "      <td>France</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>Henriot</td>\n",
       "      <td>Paul</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10134</td>\n",
       "      <td>41</td>\n",
       "      <td>94.74</td>\n",
       "      <td>2</td>\n",
       "      <td>3884.34</td>\n",
       "      <td>2003-07-01</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>27 rue du Colonel Pierre Avia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Paris</td>\n",
       "      <td>NaN</td>\n",
       "      <td>75508</td>\n",
       "      <td>France</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>Da Cunha</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10145</td>\n",
       "      <td>45</td>\n",
       "      <td>83.26</td>\n",
       "      <td>6</td>\n",
       "      <td>3746.70</td>\n",
       "      <td>2003-08-25</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>78934 Hillside Dr.</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pasadena</td>\n",
       "      <td>CA</td>\n",
       "      <td>90003</td>\n",
       "      <td>USA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Young</td>\n",
       "      <td>Julie</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10159</td>\n",
       "      <td>49</td>\n",
       "      <td>100.00</td>\n",
       "      <td>14</td>\n",
       "      <td>5205.27</td>\n",
       "      <td>2003-10-10</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>7734 Strong St.</td>\n",
       "      <td>NaN</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>CA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Julie</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2818</th>\n",
       "      <td>10350</td>\n",
       "      <td>20</td>\n",
       "      <td>100.00</td>\n",
       "      <td>15</td>\n",
       "      <td>2244.40</td>\n",
       "      <td>2004-12-02</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>2004</td>\n",
       "      <td>...</td>\n",
       "      <td>C/ Moralzarzal, 86</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28034</td>\n",
       "      <td>Spain</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>Freyre</td>\n",
       "      <td>Diego</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>10373</td>\n",
       "      <td>29</td>\n",
       "      <td>100.00</td>\n",
       "      <td>1</td>\n",
       "      <td>3978.51</td>\n",
       "      <td>2005-01-31</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2005</td>\n",
       "      <td>...</td>\n",
       "      <td>Torikatu 38</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Oulu</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90110</td>\n",
       "      <td>Finland</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>Koskitalo</td>\n",
       "      <td>Pirkko</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2820</th>\n",
       "      <td>10386</td>\n",
       "      <td>43</td>\n",
       "      <td>100.00</td>\n",
       "      <td>4</td>\n",
       "      <td>5417.57</td>\n",
       "      <td>2005-03-01</td>\n",
       "      <td>Resolved</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2005</td>\n",
       "      <td>...</td>\n",
       "      <td>C/ Moralzarzal, 86</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28034</td>\n",
       "      <td>Spain</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>Freyre</td>\n",
       "      <td>Diego</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2821</th>\n",
       "      <td>10397</td>\n",
       "      <td>34</td>\n",
       "      <td>62.24</td>\n",
       "      <td>1</td>\n",
       "      <td>2116.16</td>\n",
       "      <td>2005-03-28</td>\n",
       "      <td>Shipped</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2005</td>\n",
       "      <td>...</td>\n",
       "      <td>1 rue Alsace-Lorraine</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Toulouse</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31000</td>\n",
       "      <td>France</td>\n",
       "      <td>EMEA</td>\n",
       "      <td>Roulet</td>\n",
       "      <td>Annette</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2822</th>\n",
       "      <td>10414</td>\n",
       "      <td>47</td>\n",
       "      <td>65.52</td>\n",
       "      <td>9</td>\n",
       "      <td>3079.44</td>\n",
       "      <td>2005-05-06</td>\n",
       "      <td>On Hold</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2005</td>\n",
       "      <td>...</td>\n",
       "      <td>8616 Spinnaker Dr.</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Boston</td>\n",
       "      <td>MA</td>\n",
       "      <td>51003</td>\n",
       "      <td>USA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yoshido</td>\n",
       "      <td>Juri</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2823 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
       "0           10107               30      95.70                2  2871.00   \n",
       "1           10121               34      81.35                5  2765.90   \n",
       "2           10134               41      94.74                2  3884.34   \n",
       "3           10145               45      83.26                6  3746.70   \n",
       "4           10159               49     100.00               14  5205.27   \n",
       "...           ...              ...        ...              ...      ...   \n",
       "2818        10350               20     100.00               15  2244.40   \n",
       "2819        10373               29     100.00                1  3978.51   \n",
       "2820        10386               43     100.00                4  5417.57   \n",
       "2821        10397               34      62.24                1  2116.16   \n",
       "2822        10414               47      65.52                9  3079.44   \n",
       "\n",
       "      ORDERDATE    STATUS  QTR_ID  MONTH_ID  YEAR_ID  ...  \\\n",
       "0    2003-02-24   Shipped       1         2     2003  ...   \n",
       "1    2003-05-07   Shipped       2         5     2003  ...   \n",
       "2    2003-07-01   Shipped       3         7     2003  ...   \n",
       "3    2003-08-25   Shipped       3         8     2003  ...   \n",
       "4    2003-10-10   Shipped       4        10     2003  ...   \n",
       "...         ...       ...     ...       ...      ...  ...   \n",
       "2818 2004-12-02   Shipped       4        12     2004  ...   \n",
       "2819 2005-01-31   Shipped       1         1     2005  ...   \n",
       "2820 2005-03-01  Resolved       1         3     2005  ...   \n",
       "2821 2005-03-28   Shipped       1         3     2005  ...   \n",
       "2822 2005-05-06   On Hold       2         5     2005  ...   \n",
       "\n",
       "                       ADDRESSLINE1  ADDRESSLINE2           CITY STATE  \\\n",
       "0           897 Long Airport Avenue           NaN            NYC    NY   \n",
       "1                59 rue de l'Abbaye           NaN          Reims   NaN   \n",
       "2     27 rue du Colonel Pierre Avia           NaN          Paris   NaN   \n",
       "3                78934 Hillside Dr.           NaN       Pasadena    CA   \n",
       "4                   7734 Strong St.           NaN  San Francisco    CA   \n",
       "...                             ...           ...            ...   ...   \n",
       "2818             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
       "2819                    Torikatu 38           NaN           Oulu   NaN   \n",
       "2820             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
       "2821          1 rue Alsace-Lorraine           NaN       Toulouse   NaN   \n",
       "2822             8616 Spinnaker Dr.           NaN         Boston    MA   \n",
       "\n",
       "     POSTALCODE  COUNTRY TERRITORY CONTACTLASTNAME CONTACTFIRSTNAME DEALSIZE  \n",
       "0         10022      USA       NaN              Yu             Kwai    Small  \n",
       "1         51100   France      EMEA         Henriot             Paul    Small  \n",
       "2         75508   France      EMEA        Da Cunha           Daniel   Medium  \n",
       "3         90003      USA       NaN           Young            Julie   Medium  \n",
       "4           NaN      USA       NaN           Brown            Julie   Medium  \n",
       "...         ...      ...       ...             ...              ...      ...  \n",
       "2818      28034    Spain      EMEA          Freyre            Diego    Small  \n",
       "2819      90110  Finland      EMEA       Koskitalo           Pirkko   Medium  \n",
       "2820      28034    Spain      EMEA          Freyre            Diego   Medium  \n",
       "2821      31000   France      EMEA          Roulet          Annette    Small  \n",
       "2822      51003      USA       NaN         Yoshido             Juri   Medium  \n",
       "\n",
       "[2823 rows x 25 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c6911188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.134169Z",
     "iopub.status.busy": "2022-11-11T05:54:37.133281Z",
     "iopub.status.idle": "2022-11-11T05:54:37.141188Z",
     "shell.execute_reply": "2022-11-11T05:54:37.140095Z"
    },
    "papermill": {
     "duration": 0.017089,
     "end_time": "2022-11-11T05:54:37.143854",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.126765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Removing the variables which dont add significant value fot the analysis.\n",
    "to_drop = ['PHONE','ADDRESSLINE1','ADDRESSLINE2','STATE','POSTALCODE']\n",
    "df = df.drop(to_drop, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "52ae0199",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.155604Z",
     "iopub.status.busy": "2022-11-11T05:54:37.154925Z",
     "iopub.status.idle": "2022-11-11T05:54:37.184773Z",
     "shell.execute_reply": "2022-11-11T05:54:37.183301Z"
    },
    "papermill": {
     "duration": 0.039271,
     "end_time": "2022-11-11T05:54:37.187986",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.148715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate Recency, Frequency and Monetary value for each customer\n",
    "snapshot_date = df['ORDERDATE'].max() + dt.timedelta(days=1) #latest date in the data set\n",
    "df_RFM = df.groupby(['CUSTOMERNAME']).agg({\n",
    "    'ORDERDATE': lambda x: (snapshot_date - x.max()).days,\n",
    "    'ORDERNUMBER': 'count',\n",
    "    'SALES':'sum'})\n",
    "\n",
    "#Renaming the columns\n",
    "df_RFM.rename(columns={'ORDERDATE': 'Recency',\n",
    "                   'ORDERNUMBER': 'Frequency',\n",
    "                   'SALES': 'MonetaryValue'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "234d0c3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.200247Z",
     "iopub.status.busy": "2022-11-11T05:54:37.199771Z",
     "iopub.status.idle": "2022-11-11T05:54:37.212953Z",
     "shell.execute_reply": "2022-11-11T05:54:37.211833Z"
    },
    "papermill": {
     "duration": 0.022294,
     "end_time": "2022-11-11T05:54:37.215567",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.193273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>MonetaryValue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CUSTOMERNAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AV Stores, Co.</th>\n",
       "      <td>196</td>\n",
       "      <td>51</td>\n",
       "      <td>157807.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alpha Cognac</th>\n",
       "      <td>65</td>\n",
       "      <td>20</td>\n",
       "      <td>70488.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amica Models &amp; Co.</th>\n",
       "      <td>265</td>\n",
       "      <td>26</td>\n",
       "      <td>94117.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anna's Decorations, Ltd</th>\n",
       "      <td>84</td>\n",
       "      <td>46</td>\n",
       "      <td>153996.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atelier graphique</th>\n",
       "      <td>188</td>\n",
       "      <td>7</td>\n",
       "      <td>24179.96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Recency  Frequency  MonetaryValue\n",
       "CUSTOMERNAME                                              \n",
       "AV Stores, Co.               196         51      157807.81\n",
       "Alpha Cognac                  65         20       70488.44\n",
       "Amica Models & Co.           265         26       94117.26\n",
       "Anna's Decorations, Ltd       84         46      153996.13\n",
       "Atelier graphique            188          7       24179.96"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = df_RFM[['Recency','Frequency','MonetaryValue']]\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "02fdf44f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.227937Z",
     "iopub.status.busy": "2022-11-11T05:54:37.227531Z",
     "iopub.status.idle": "2022-11-11T05:54:37.240008Z",
     "shell.execute_reply": "2022-11-11T05:54:37.238820Z"
    },
    "papermill": {
     "duration": 0.021663,
     "end_time": "2022-11-11T05:54:37.242562",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.220899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>MonetaryValue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CUSTOMERNAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AV Stores, Co.</th>\n",
       "      <td>5.278115</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>11.969133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alpha Cognac</th>\n",
       "      <td>4.174387</td>\n",
       "      <td>2.995732</td>\n",
       "      <td>11.163204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amica Models &amp; Co.</th>\n",
       "      <td>5.579730</td>\n",
       "      <td>3.258097</td>\n",
       "      <td>11.452297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anna's Decorations, Ltd</th>\n",
       "      <td>4.430817</td>\n",
       "      <td>3.828641</td>\n",
       "      <td>11.944683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atelier graphique</th>\n",
       "      <td>5.236442</td>\n",
       "      <td>1.945910</td>\n",
       "      <td>10.093279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Recency  Frequency  MonetaryValue\n",
       "CUSTOMERNAME                                               \n",
       "AV Stores, Co.           5.278115   3.931826      11.969133\n",
       "Alpha Cognac             4.174387   2.995732      11.163204\n",
       "Amica Models & Co.       5.579730   3.258097      11.452297\n",
       "Anna's Decorations, Ltd  4.430817   3.828641      11.944683\n",
       "Atelier graphique        5.236442   1.945910      10.093279"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_log = np.log(data)\n",
    "data_log.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0ff78334",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.255776Z",
     "iopub.status.busy": "2022-11-11T05:54:37.254845Z",
     "iopub.status.idle": "2022-11-11T05:54:37.287489Z",
     "shell.execute_reply": "2022-11-11T05:54:37.285811Z"
    },
    "papermill": {
     "duration": 0.041828,
     "end_time": "2022-11-11T05:54:37.290198",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.248370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>MonetaryValue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>92.00</td>\n",
       "      <td>92.00</td>\n",
       "      <td>92.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.01</td>\n",
       "      <td>1.01</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-3.51</td>\n",
       "      <td>-3.67</td>\n",
       "      <td>-3.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.37</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.53</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.12</td>\n",
       "      <td>4.03</td>\n",
       "      <td>3.92</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Recency  Frequency  MonetaryValue\n",
       "count    92.00      92.00          92.00\n",
       "mean      0.00      -0.00           0.00\n",
       "std       1.01       1.01           1.01\n",
       "min      -3.51      -3.67          -3.82\n",
       "25%      -0.24      -0.41          -0.39\n",
       "50%       0.37       0.06          -0.04\n",
       "75%       0.53       0.45           0.52\n",
       "max       1.12       4.03           3.92"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Standardizing the variables using StandardScaler() for equal variance and mean\n",
    "# Initialize a scaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit the scaler\n",
    "scaler.fit(data_log)\n",
    "\n",
    "# Scale and center the data\n",
    "data_normalized = scaler.transform(data_log)\n",
    "\n",
    "# Create a pandas DataFrame\n",
    "data_normalized = pd.DataFrame(data_normalized, index=data_log.index, columns=data_log.columns)\n",
    "\n",
    "# Print summary statistics\n",
    "data_normalized.describe().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f9ffdb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:37.303014Z",
     "iopub.status.busy": "2022-11-11T05:54:37.302645Z",
     "iopub.status.idle": "2022-11-11T05:54:38.613794Z",
     "shell.execute_reply": "2022-11-11T05:54:38.612584Z"
    },
    "papermill": {
     "duration": 1.320204,
     "end_time": "2022-11-11T05:54:38.616113",
     "exception": false,
     "start_time": "2022-11-11T05:54:37.295909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmcAAAGHCAYAAAD1HvUOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAAsTAAALEwEAmpwYAABMB0lEQVR4nO3dd3yV5d3H8c91skMggwSQJRsFQYoMQZYQ1MdRrVonKLZKBZ9qpX0qjmoVqVhFFAriqgPrbAtW6wxTQSEs2RsEIYwMVsg6ua/njwOHRDLhrCTf9+uVV849zvn9TpSTb677vq/bWGstIiIiIhISXMFuQEREREROUjgTERERCSEKZyIiIiIhROFMREREJIQonImIiIiEEIUzERERkRCicCYiZ6RVq1Y8+eSTQam9Y8cOjDF88803ZS7XBf5+z8YY3n77bb+8toiUTeFMRMpkjKnwq1WrVn6tfyJ0lPX17LPP+rW2L7Rq1QpjDJMnTz5l2/33348xhtTU1Gq9ZmpqKiNGjPBRhyISqsKD3YCIhKaMjAzv40WLFnHdddexfPlyzjrrLADCwsIC0sdHH31Er169Sq1r0KBBQGqfqZYtW/Lqq69y7733etfl5+fz1ltvcfbZZwexMxEJZRo5E5EyNWnSxPuVlJQEQEpKinddSkqKd9/CwkLuu+8+kpKSaNy4Mffffz9ut7vU602ZMoVzzjmH6Oho2rdvz/jx40/ZpyxJSUmlemnSpAmxsbEVPmfHjh0MGTKEmJgY2rRpw3vvvVdq+8aNG7niiiuIi4sjLi6Oq666ii1btni3t2jRgldeecW7fPvtt2OMKbVP8+bNeemllyrs46abbmLbtm0sXrzYu+6f//wniYmJDBw48JT933vvPbp160Z0dDStWrVizJgx5ObmAjBixAhmz57Nm2++6R1BnDdvnve5e/bs4corryQ2NpY2bdrwxhtvlHrtjIwMbrrpJhISEoiJiWHQoEEsXbq01D5z586la9euREdH07VrV+bOnVvh+xMR/1A4E5EzNmXKFM466ywWL17MlClT+Nvf/sabb77p3f7nP/+ZZ599lqeeeor169fzwgsv8NJLL/H444/7pZ8//vGP/OpXv2LlypXccsst3HrrraxYsQKAvLw8LrnkEvLz85k/fz7z58/n6NGjXHbZZRQWFgJw8cUXM2fOHO/rzZ07l5SUFO+6jRs3snv3bgYPHlxhH/Xr1+emm24qFfRefvll7rzzTowxpfZ94403GDVqFL///e9Zt24db731Fmlpadx9990AvPDCC/Tv358bbriBjIwMMjIy6Nu3r/f5Y8eO5bbbbmPVqlXcdNNN3HnnnWzatAkAay3XXHMNGzZs4JNPPmHJkiU0btyYoUOHkpmZCZwMdxdccAHLly9n4sSJ3Hfffaf18xeRM2RFRCoxd+5cC9hdu3adsu3ss8+2V111Val1l112mb3pppustdbm5ubamJgY+9lnn5Xa580337Tx8fHl1ty+fbsFbExMjK1Xr16pr0WLFpXa5+uvvy61/Mgjj5R6rT59+thhw4ZZa6199dVXbUxMjD1w4IB3+969e210dLR98803rbXWvv7667ZRo0bWWms3bdpkY2Ji7BNPPGFvvPFGa62106ZNsy1atKjwZ3b22WfbcePG2cWLF9t69erZw4cP2/Xr19uIiAi7d+9ee/vtt9shQ4aU2v/FF18s9Rrz58+3gM3OzrbWWjtkyBB7++23l/lzmjhxoned2+22cXFxdvr06dZaa9PS0ixg165d690nPz/fNmnSxD7++OPWWmsffvhh27JlS1tUVOTd5+OPP7aAnTFjRoXvVUR8S+ecicgZ69atW6nlpk2bsn37dgDWrl1LXl4e1113XanRouLiYvLz8zlw4ECpQ6Q/9frrr3PBBReUWte8efMK++nTp0+p5YsuuojZs2d7++nUqRPJycne7Y0bN6Zjx46sXbsW8Iyc7d+/nzVr1rBw4UL69evHZZddxt/+9jcA5syZw8UXX1xhDyf06tWLdu3a8e6777JhwwauuuoqGjduXGqfAwcO8MMPPzBmzBj+8Ic/eNdbawHYsmULPXv2rLBOyf8GYWFhNGrUiH379nnfc8OGDenUqZN3n6ioKHr37u19z+vWraNXr16Eh5/8tdCvX78qvUcR8S2FMxE5Y5GRkaWWjTE4jgPg/f7hhx/SoUOHU5574ny28jRr1ox27dr5qNOqOfvss2nTpg2zZ89m0aJFDB48mO7du1NQUMDq1auZN29eta4YHTlyJC+++CK7du3iH//4xynbT/yMXnjhhTJDX2VhFCr+byAiNYvOORMRv+rcuTPR0dFs27aNdu3anfLlj6s+v/vuu1LLixYt8o4ade7cmXXr1nnPtQLYt28fGzdu5LzzzvOuu/jii5k9ezbz5s1jyJAhhIWFMXDgQJ5//nkyMzMrPd+spGHDhrF582bq16/P0KFDT9neuHFjWrRowcaNG8v8GUVHRwOeAFZcXFytn8WJ95yVlcW6deu86woKCli8eLH3PXfq1IklS5aUev2FCxdWu5aInDmFMxHxq7i4OB566CEeeughpk6dysaNG1m7di3vvfceDzzwQKXPz87OZu/evaW+jhw5UuFzXnvtNd555x02bdrEo48+yrfffsuYMWMAuOWWW0hJSeHGG29k+fLlLFu2jJtuuolmzZpx4403el9j8ODBfPbZZxQUFNC9e3fvurfeeot27drRokWLKv8MGjRowO7du1m1ahUuV9kfu+PHj2fy5MmMHz+eNWvWsHHjRmbNmsVvfvMb7z6tW7dm2bJlbN26lczMTIqKiqpUf/DgwfTq1YtbbrmFhQsXsmbNGm677Tby8/MZNWoUAKNGjeLAgQOMHDmS9evXM3v2bB5++OEqv0cR8R2FMxHxuz/96U8899xzvPLKK5x//vn069ePSZMmVWki26uvvpqzzjqr1NeDDz5Y4XMmTJjAyy+/TNeuXZkxYwZvv/22N2DFxMTw5ZdfEhUVxYABAxg4cCD16tXj888/L3Vo8OKLL8btdjNw4EDv6N7gwYNxu93VGjU7IT4+nvr165e7ffjw4XzwwQd88skn9OrVi549e/LnP/+ZZs2aeff5/e9/T3JyMueffz4pKSlVHtkyxjBr1izOOeccrrjiCnr27MnevXv56quvvOfeNWvWjI8//pglS5bQrVs37rvvPp577rlqv08ROXPGnjjjVERERESCTiNnIiIiIiFE4UxEREQkhCiciYiIiIQQhTMRERGREKJwJiIiIhJCFM5EREREQkitun3Tnj17gt2CiIiISKWaNm1a7jaNnImIiIiEEIUzERERkRCicCYiIiISQhTOREREREKIwpmIiIhICFE4ExEREQkhCmciIiIiIUThTERERCSE1KpJaKvKZh/AfjkLu3IxFBZA23NwDb0G06FzsFsTERGROs5Ya22wm/CVqtwhwGb8iPPMg3DkUOkNxmBu/y2ui1L91J2IiIiIh+4QUILz9rRTgxmAtdi3X8SWtU1EREQkQOpUOLMH9sKmNeXv4C7CLvk6cA2JiIiI/ESdCmcczK7CPln+70NERESkHHUrnDVM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osi0adNYvnw58fHxTJw4EYAPPviA2bNn06BBAwBuvvlmunfvDsDMmTOZM2cOLpeLO+64g27dugWizaAyP7sQG1sPjuViv52D/cUwTHhEsNsSERGRAAtIOBs0aBCXXXYZU6dOLbX+iiuu4Oc//3mpdT/++COLFi3iueeeIycnh3HjxvHCCy/gctXuQT4TGYXpPQg7979w5BCsSofufYPdloiIiARYQBJPp06diIuLq9K+6enp9O3bl4iICBo1akSTJk3YsmWLnzsMDd7bOQHO15rzTEREpC4KyMhZeb744gsWLFhAmzZtuO2224iLiyM7O5v27dt790lKSiI7O7vM56elpZGW5jk/a8KECSQnJwekb79JTiar7Tm4t26AtctJpJiw5MbB7kpEREQCKGjh7JJLLuH6668H4P333+ett95i9OjR1XqN1NRUUlNPTkORmZnp0x6DwbnwYti6Aawl65MPcV15U7BbEhERER9r2rRpudsqPaz597//vdTynDlzSi0/++yzp9VUQkICLpcLl8vFkCFD2Lp1K+AZKcvKyvLul52dTVJS0mnVqIlMrwEQGQl4rtq0jhPkjkRERCSQKg1n8+fPL7U8Y8aMUsurV68+rcI5OTnex0uWLKFFixYA9OjRg0WLFlFUVMT+/fvJyMigXbt2p1WjJjKx9TAXXORZyNoPG1YFtyEREREJqEoPa1prz7jI888/z7p16zhy5Ah33303N9xwA2vXrmXHjh0YY0hJSWHkyJEAtGjRgj59+jBmzBhcLhe//vWva/2Vmj9l+g3FfjsX8NwM3XTqFtyGREREJGAqDWfGmDMu8rvf/e6UdYMHDy53/2uvvZZrr732jOvWWO07Q6OmsH8PdsW32KOHMXENgt2ViIiIBECl4ay4uJg1a9Z4lx3HOWVZfMsYg+k/FPuvN8Htxn43D5P688qfKCIiIjVepeEsPj6eF1980bscFxdXavnEDP/iW6bPYOzMGeA42G++wg65yiejmCIiIhLaKg1nP53VXwLDxCdC116w8jvY/QPs2AytOwS7LREREfGz0zrTfs+ePSxZsoQDBw74uh8pwVXijgH26y+D2ImIiIgESqXh7M0332TBggXe5fnz5zNmzBheeuklfve737FixQq/NlinndcdEjxzvNklX2Pz84LckIiIiPhbpeEsPT2dTp06eZffffdd7rjj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oYf44osvWLdund9qFRcXs337di655BL++te/EhUVxaxZs/xW7wS3282yZcu48MIL/Vrn6NGjpKenM3XqVF566SXy8/NZsGCB3+o1b96cq6++mieffJK//OUvtGrVCpcrsB9Fxhi/jiQH07///W/CwsLo37+/32vdfPPNvPjii/Tr14/PP//cb3UKCgqYOXMmN954o99q/NQll1zClClT+Otf/0piYiJvvfWW32o5jsPRo0cZP348w4cPZ9KkSdgATKQQiD/+wDMyePvtt/Piiy9y++23M336dL/WGzVqFF9++SUPPPAAeXl5hIf7fhyqot/lvvh8UTgLILfbzcSJE+nfvz+9e/cOWN169erRuXNnVq5c6ZfX37hxI0uXLuWee+7h+eefZ82aNUyePNkvtU44ceJxfHw8PXv2ZMuWLX6r1bBhQxo2bOgdebzwwgvZvn273+qdsGLFClq3bk1CQoJf66xevZpGjRrRoEEDwsPD6d27N5s2bfJrzcGDB/P000/z+OOPU69ePb//5Q6e/1dycnIAyMnJ8dnJ5KFk3rx5LFu2jHvvvTeg4bN///4+PzRd0r59+9i/fz//93//xz333ENWVhYPPPAABw8e9FvNhIQEXC4XLpeLIUOGsHXrVr/VSkpKolevXhhjaNeuHS6XiyNHjvitHnj+6FyyZElARljnz5/v/Z3Xp08fv35eAzRr1oxHHnmEp59+mosuuojGjRv79PXL+l3u688XhbMAsdYyffp0mjVrxpVXXun3eocPHyY3NxfwXLm5atUqmjVr5pdat9xyC9OnT2fq1Kn87ne/47zzzuPee+/1Sy3w/MVy4vBpfn4+q1atomXLln6rl5CQQMOGDb1XN61evZrmzZv7rd4JgfqrNjk5mc2bN1NQUIC1ltWrV/vt/5UTTgz5Z2ZmsmTJEvr16+fXegA9evRg/vz5gOeXRc+ePf1eM5BWrlzJRx99xAMPPEBUVJTf62VkZHgfp6en++38OoCWLVvy6quvMnXqVKZOnUrDhg15+umn/fqHy4lftABLliyhRYsWfqvVs2dP1q5dC3jOl3K73dSvX99v9cDzOda0aVMaNmzo1zrgCZ8njm6sWbOGJk2a+LXeic8Xx3H497//zdChQ3322uX9Lvf150udnYT2+eefZ926dRw5coT4+HhuuOEG7wnf/rBhwwYeffRRWrZs6f2L1leXZpflhx9+YOrUqTiOg7WWPn36cP311/ulVklr167l448/9utUGvv27ePZZ58FPH/99evXj2uvvdZv9cBzafb06dNxu900atSI0aNH+/UE4vz8fEaPHs3f/vY3vx/+Bs+0AYsWLSIsLIxWrVpx9913e09O9odHH32UI0eOEB4ezm233UaXLl18+vpl/fvu2bMnkyZNIjMz0+dTaZRVLy4ujr///e8cPnyYevXq0apVKx5++GG/1Zs5cyZut9v7ntq3b8/IkSP9Vm/58uVkZGRgjCE5OZmRI0f6bCqNyj6f77nnHp566imfjX6WVW/t2rXs2LEDYwwpKSmMHDnSJyeyl1VrwIAB3nNaw8PDGT58OOedd54P3ln5P8upU6fSvn17LrnkEp/Uqahe06ZNef3113Ech4iICO68806fnQZTVr38/Hy++OILAHr16sUtt9zis5Hk8n6Xt2/f3qefL3U2nImIiIiEIh3WFBEREQkhCmciIiIiIUThTERERCSEKJyJiIiIhBCFMxEREZEQonAmIlKGe+65h1WrVgW7DRGpgxTOREREREKIwpmIiIhICFE4ExGpxI8//sg999zDN998E+xWRKQO8P2t2kVEapFt27bxzDPPcOedd3LBBRcEux0RqQMUzkREyrFhwwbmzJnDb3/7Wzp37hzsdkSkjtBhTRGRcnz11Vd06NBBwUxEAkrhTESkHHfddRdZWVm88cYbwW5FROoQhTMRkXJER0fz0EMPsX79ev7xj38Eux0RqSMUzkREKlCvXj3+9Kc/sXLlSt57771gtyMidYCx1tpgNyEiIiIiHho5ExEREQkhCmciIiIiIUThTERERCSEKJyJiIiIhBCFMxEREZEQonAmIiIiEkIUzkRERERCiMKZiIiISAhROBMREREJIf8PtoljAC4hEGwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Choosing number of Clusters using Elbow Method\n",
    "# Fit KMeans and calculate SSE for each k\n",
    "sse={}\n",
    "for k in range(1, 21):\n",
    "    kmeans = KMeans(n_clusters=k, random_state=1)\n",
    "    kmeans.fit(data_normalized)\n",
    "    sse[k] = kmeans.inertia_ \n",
    "\n",
    "    \n",
    "plt.figure(figsize=(10,6))\n",
    "# Add the plot title \"The Elbow Method\"\n",
    "plt.title('The Elbow Method')\n",
    "\n",
    "# Add X-axis label \"k\"\n",
    "plt.xlabel('k')\n",
    "\n",
    "# Add Y-axis label \"SSE\"\n",
    "plt.ylabel('SSE')\n",
    "\n",
    "# Plot SSE values for each key in the dictionary\n",
    "sns.pointplot(x=list(sse.keys()), y=list(sse.values()))\n",
    "plt.text(4.5,60,\"Largest Angle\",bbox=dict(facecolor='lightgreen', alpha=0.5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f4e3734b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:38.630507Z",
     "iopub.status.busy": "2022-11-11T05:54:38.630002Z",
     "iopub.status.idle": "2022-11-11T05:54:39.682758Z",
     "shell.execute_reply": "2022-11-11T05:54:39.681413Z"
    },
    "papermill": {
     "duration": 1.062913,
     "end_time": "2022-11-11T05:54:39.685210",
     "exception": false,
     "start_time": "2022-11-11T05:54:38.622297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Choosing number of Clusters using Elbow Method\n",
    "# Fit KMeans and calculate SSE for each k\n",
    "sse={}\n",
    "for k in range(1, 21):\n",
    "    kmeans = KMeans(n_clusters=k, random_state=1)\n",
    "    kmeans.fit(data_normalized)\n",
    "    sse[k] = kmeans.inertia_ \n",
    "\n",
    "    \n",
    "plt.figure(figsize=(10,6))\n",
    "# Add the plot title \"The Elbow Method\"\n",
    "plt.title('The Elbow Method')\n",
    "\n",
    "# Add X-axis label \"k\"\n",
    "plt.xlabel('k')\n",
    "\n",
    "# Add Y-axis label \"SSE\"\n",
    "plt.ylabel('SSE')\n",
    "\n",
    "# Plot SSE values for each key in the dictionary\n",
    "sns.pointplot(x=list(sse.keys()), y=list(sse.values()))\n",
    "plt.text(4.5,60,\"Largest Angle\",bbox=dict(facecolor='lightgreen', alpha=0.5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "81d711a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:39.699653Z",
     "iopub.status.busy": "2022-11-11T05:54:39.699230Z",
     "iopub.status.idle": "2022-11-11T05:54:39.750725Z",
     "shell.execute_reply": "2022-11-11T05:54:39.749775Z"
    },
    "papermill": {
     "duration": 0.061408,
     "end_time": "2022-11-11T05:54:39.753139",
     "exception": false,
     "start_time": "2022-11-11T05:54:39.691731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>MonetaryValue</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CUSTOMERNAME</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AV Stores, Co.</th>\n",
       "      <td>196</td>\n",
       "      <td>51</td>\n",
       "      <td>157807.81</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alpha Cognac</th>\n",
       "      <td>65</td>\n",
       "      <td>20</td>\n",
       "      <td>70488.44</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amica Models &amp; Co.</th>\n",
       "      <td>265</td>\n",
       "      <td>26</td>\n",
       "      <td>94117.26</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anna's Decorations, Ltd</th>\n",
       "      <td>84</td>\n",
       "      <td>46</td>\n",
       "      <td>153996.13</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atelier graphique</th>\n",
       "      <td>188</td>\n",
       "      <td>7</td>\n",
       "      <td>24179.96</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Recency  Frequency  MonetaryValue  Cluster\n",
       "CUSTOMERNAME                                                       \n",
       "AV Stores, Co.               196         51      157807.81        3\n",
       "Alpha Cognac                  65         20       70488.44        0\n",
       "Amica Models & Co.           265         26       94117.26        0\n",
       "Anna's Decorations, Ltd       84         46      153996.13        3\n",
       "Atelier graphique            188          7       24179.96        2"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Running KMeans with 5 clusters\n",
    "# Initialize KMeans\n",
    "kmeans = KMeans(n_clusters=5, random_state=1) \n",
    "\n",
    "# Fit k-means clustering on the normalized data set\n",
    "kmeans.fit(data_normalized)\n",
    "\n",
    "# Extract cluster labels\n",
    "cluster_labels = kmeans.labels_\n",
    "\n",
    "# Assigning Cluster Labels to Raw Data\n",
    "# Create a DataFrame by adding a new cluster label column\n",
    "data_rfm = data.assign(Cluster=cluster_labels)\n",
    "data_rfm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6f2c9c70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-11T05:54:39.768875Z",
     "iopub.status.busy": "2022-11-11T05:54:39.767955Z",
     "iopub.status.idle": "2022-11-11T05:54:39.797362Z",
     "shell.execute_reply": "2022-11-11T05:54:39.796223Z"
    },
    "papermill": {
     "duration": 0.039466,
     "end_time": "2022-11-11T05:54:39.799768",
     "exception": false,
     "start_time": "2022-11-11T05:54:39.760302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th colspan=\"2\" halign=\"left\">MonetaryValue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>209.2</td>\n",
       "      <td>22.1</td>\n",
       "      <td>78633.2</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>38.8</td>\n",
       "      <td>132201.6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>324.2</td>\n",
       "      <td>10.7</td>\n",
       "      <td>35628.7</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>126.5</td>\n",
       "      <td>37.1</td>\n",
       "      <td>133158.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>219.5</td>\n",
       "      <td>783576.1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Recency Frequency MonetaryValue      \n",
       "           mean      mean          mean count\n",
       "Cluster                                      \n",
       "0         209.2      22.1       78633.2    43\n",
       "1           2.0      38.8      132201.6     4\n",
       "2         324.2      10.7       35628.7    12\n",
       "3         126.5      37.1      133158.0    31\n",
       "4           2.0     219.5      783576.1     2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group the data by cluster\n",
    "grouped = data_rfm.groupby(['Cluster'])\n",
    "\n",
    "# Calculate average RFM values and segment sizes per cluster value\n",
    "grouped.agg({\n",
    "    'Recency': 'mean',\n",
    "    'Frequency': 'mean',\n",
    "    'MonetaryValue': ['mean', 'count']\n",
    "  }).round(1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.822959,
   "end_time": "2022-11-11T05:54:40.729672",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-11-11T05:54:24.906713",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
